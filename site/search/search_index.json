{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is cs-insights? cs-insights is an open-source project that makes information about computer science research available with the click of a button. Features At-a-glance view of publications from top computer science conferences Get analytics about a venues, authors, citations, topics, and more Browse papers by subject area Currently supports over 10 different search terms. Stay informed with an overview of computer science events happening around the world How does it work? Just open your browser on cs-insights.uni-goettingen.de and start exploring. NOTE: You can use any browser to access the website. However, we recommend using the latest version of Google Chrome or Mozilla Firefox. How can I contribute? You can contribute to cs-insights in many ways: Report bugs and suggest new features Write code to fix bugs and implement new features and submit a pull request Improve the documentation (just click on the edit crayon icon on the top right of any page) Spread the word about cs-insights on Twitter, LinkedIn, and other social media License cs-insights is released under the MIT License . For more info, please see the License .","title":"What is cs-insights?"},{"location":"#what-is-cs-insights","text":"cs-insights is an open-source project that makes information about computer science research available with the click of a button.","title":"What is cs-insights?"},{"location":"#features","text":"At-a-glance view of publications from top computer science conferences Get analytics about a venues, authors, citations, topics, and more Browse papers by subject area Currently supports over 10 different search terms. Stay informed with an overview of computer science events happening around the world","title":"Features"},{"location":"#how-does-it-work","text":"Just open your browser on cs-insights.uni-goettingen.de and start exploring. NOTE: You can use any browser to access the website. However, we recommend using the latest version of Google Chrome or Mozilla Firefox.","title":"How does it work?"},{"location":"#how-can-i-contribute","text":"You can contribute to cs-insights in many ways: Report bugs and suggest new features Write code to fix bugs and implement new features and submit a pull request Improve the documentation (just click on the edit crayon icon on the top right of any page) Spread the word about cs-insights on Twitter, LinkedIn, and other social media","title":"How can I contribute?"},{"location":"#license","text":"cs-insights is released under the MIT License . For more info, please see the License .","title":"License"},{"location":"about/","text":"About This is an example about page.","title":"About the Authors"},{"location":"about/#about","text":"This is an example about page.","title":"About"},{"location":"community/","text":"Community Get involved with the community of cs-insights using the links below. GitHub Check the source code of the project on GitHub . Pull requests are very welcome. Issue tracker Experience a bug in dstack or find something inconvenient? File a GitHub issue .","title":"Community"},{"location":"community/#community","text":"Get involved with the community of cs-insights using the links below.","title":"Community"},{"location":"community/#github","text":"Check the source code of the project on GitHub . Pull requests are very welcome.","title":" GitHub"},{"location":"community/#issue-tracker","text":"Experience a bug in dstack or find something inconvenient? File a GitHub issue .","title":" Issue tracker"},{"location":"dev/","text":"Development Before following the tutorial, make sure you've installed and configured the dstack CLI. Clone repo In this tutorial, we'll use the dstackai/dstack-examples GitHub repo. Go ahead and clone this repo. git clone https://github.com/dstackai/dstack-examples.git cd dstack-examples If you open the .dstack/workflows.yaml file inside the project, you'll see the following: workflows : - name : download provider : bash commands : - pip install -r requirements.txt - python mnist/download.py artifacts : - path : data - name : train deps : - tag : mnist_data provider : bash commands : - pip install -r requirements.txt - python mnist/train.py artifacts : - path : lightning_logs The download workflow downloads the dataset to the data folder and saves it as an artifact. The train workflow uses the data from the mnist_data tag to train a model. It writes checkpoints and logs within the lightning_logs folder, and saves it as an artifact. Start Environment You can spinup the development environment with docker or locally. We do recommend docker to have the same build as in production. Docker Local workflows : - name : hello-fastapi provider : bash ports : 1 commands : - pip install fastapi uvicorn - uvicorn hello_fastapi:app --port $PORT_0 --host 0.0.0.0 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } Init repo Before you can use dstack on a new Git repo, you have to run the dstack init command: dstack init It will ensure that dstack has the access to the Git repo. Run download workflow Now, you can use the dstack run command to run the download workflow: dstack run download When you run a workflow, the CLI provisions infrastructure, prepares environment, fetches your code, etc. You'll see the output in real-time as your workflow is running. RUN WORKFLOW STATUS APPS ARTIFACTS SUBMITTED TAG grumpy-zebra-1 download Submitted data now Provisioning... It may take up to a minute. \u2713 To interrupt, press Ctrl+C. Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz Extracting /workflow/data/MNIST/raw/train-images-idx3-ubyte.gz Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz Extracting /workflow/data/MNIST/raw/train-images-idx1-ubyte.gz Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx2-ubyte.gz Extracting /workflow/data/MNIST/raw/train-images-idx2-ubyte.gz Once the workflow is finished, its artifacts are saved and infrastructure is torn down. Use the dstack ps command to see the status of recent workflows. dstack ps It shows currently running workflows or the last finished one. RUN WORKFLOW STATUS APPS ARTIFACTS SUBMITTED TAG grumpy-zebra-1 download Done data a min ago To see all workflows, use the dstack ps -a command. NOTE: The value in the RUN column is the name of the corresponding run. It serves as a unique identifier of the run. Access artifacts To see artifacts of a run, use the dstack artifacts list command followed by the name of the run. dstack artifacts list grumpy-zebra-1 It will list all saved files inside artifacts along with their size: PATH FILE SIZE data MNIST/raw/t10k-images-idx3-ubyte 7 .5MiB MNIST/raw/t10k-images-idx3-ubyte.gz 1 .6MiB MNIST/raw/t10k-labels-idx1-ubyte 9 .8KiB MNIST/raw/t10k-labels-idx1-ubyte.gz 4 .4KiB MNIST/raw/train-images-idx3-ubyte 44 .9MiB MNIST/raw/train-images-idx3-ubyte.gz 9 .5MiB MNIST/raw/train-labels-idx1-ubyte 58 .6KiB MNIST/raw/train-labels-idx1-ubyte.gz 28 .2KiB Add tag If you want to use the artifacts of a particular run from other workflows, you can add a tag to this run. Let's assign the mnist_data tag to our finished run grumpy-zebra-1 . dstack tags add mnist_data grumpy-zebra-1 You can see all tags of the current repo via the dstack tags command. You can use a tag name instead of the run name with the dstack artifacts command. Just put a colon before the tag name: dstack artifacts list :mnist_data Run train workflow Now that the mnist_data tag is added, we can run the train workflow. dstack run train On the start of the train workflow, dstack will download the artifacts of the tag mnist_data to the working directory. RUN WORKFLOW STATUS APPS ARTIFACTS SUBMITTED TAG wet-mangust-2 train Submitted lightning_logs now Povisioning... It may take up to a minute. \u2713 To interrupt, press Ctrl+C. Epoch 4 : 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 1876 /1876 [ 00 :17< 00 :00, 107 .85it/s, loss = 0 .0944, v_num = 0 , val_loss = 0 .108, val_acc = 0 .968 ] ` Trainer.fit ` stopped: ` max_epochs = 5 ` reached. Testing DataLoader 0 : 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 313 /313 [ 00 :00< 00 :00, 589 .34it/s ] Test metric DataLoader 0 val_acc 0 .965399980545044 val_loss 0 .10975822806358337 Download artifacts Once the train workflow is finished, if you want, you can download its artifacts using the dstack artifacts download command. dstack artifacts download wet-mangust-2 . It will download the lightning_logs folder to the current directory.","title":"Local Development"},{"location":"dev/#development","text":"Before following the tutorial, make sure you've installed and configured the dstack CLI.","title":"Development"},{"location":"dev/#clone-repo","text":"In this tutorial, we'll use the dstackai/dstack-examples GitHub repo. Go ahead and clone this repo. git clone https://github.com/dstackai/dstack-examples.git cd dstack-examples If you open the .dstack/workflows.yaml file inside the project, you'll see the following: workflows : - name : download provider : bash commands : - pip install -r requirements.txt - python mnist/download.py artifacts : - path : data - name : train deps : - tag : mnist_data provider : bash commands : - pip install -r requirements.txt - python mnist/train.py artifacts : - path : lightning_logs The download workflow downloads the dataset to the data folder and saves it as an artifact. The train workflow uses the data from the mnist_data tag to train a model. It writes checkpoints and logs within the lightning_logs folder, and saves it as an artifact.","title":"Clone repo"},{"location":"dev/#start-environment","text":"You can spinup the development environment with docker or locally. We do recommend docker to have the same build as in production. Docker Local workflows : - name : hello-fastapi provider : bash ports : 1 commands : - pip install fastapi uvicorn - uvicorn hello_fastapi:app --port $PORT_0 --host 0.0.0.0 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" }","title":"Start Environment"},{"location":"dev/#init-repo","text":"Before you can use dstack on a new Git repo, you have to run the dstack init command: dstack init It will ensure that dstack has the access to the Git repo.","title":"Init repo"},{"location":"dev/#run-download-workflow","text":"Now, you can use the dstack run command to run the download workflow: dstack run download When you run a workflow, the CLI provisions infrastructure, prepares environment, fetches your code, etc. You'll see the output in real-time as your workflow is running. RUN WORKFLOW STATUS APPS ARTIFACTS SUBMITTED TAG grumpy-zebra-1 download Submitted data now Provisioning... It may take up to a minute. \u2713 To interrupt, press Ctrl+C. Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz Extracting /workflow/data/MNIST/raw/train-images-idx3-ubyte.gz Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz Extracting /workflow/data/MNIST/raw/train-images-idx1-ubyte.gz Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx2-ubyte.gz Extracting /workflow/data/MNIST/raw/train-images-idx2-ubyte.gz Once the workflow is finished, its artifacts are saved and infrastructure is torn down. Use the dstack ps command to see the status of recent workflows. dstack ps It shows currently running workflows or the last finished one. RUN WORKFLOW STATUS APPS ARTIFACTS SUBMITTED TAG grumpy-zebra-1 download Done data a min ago To see all workflows, use the dstack ps -a command. NOTE: The value in the RUN column is the name of the corresponding run. It serves as a unique identifier of the run.","title":"Run download workflow"},{"location":"dev/#access-artifacts","text":"To see artifacts of a run, use the dstack artifacts list command followed by the name of the run. dstack artifacts list grumpy-zebra-1 It will list all saved files inside artifacts along with their size: PATH FILE SIZE data MNIST/raw/t10k-images-idx3-ubyte 7 .5MiB MNIST/raw/t10k-images-idx3-ubyte.gz 1 .6MiB MNIST/raw/t10k-labels-idx1-ubyte 9 .8KiB MNIST/raw/t10k-labels-idx1-ubyte.gz 4 .4KiB MNIST/raw/train-images-idx3-ubyte 44 .9MiB MNIST/raw/train-images-idx3-ubyte.gz 9 .5MiB MNIST/raw/train-labels-idx1-ubyte 58 .6KiB MNIST/raw/train-labels-idx1-ubyte.gz 28 .2KiB","title":"Access artifacts"},{"location":"dev/#add-tag","text":"If you want to use the artifacts of a particular run from other workflows, you can add a tag to this run. Let's assign the mnist_data tag to our finished run grumpy-zebra-1 . dstack tags add mnist_data grumpy-zebra-1 You can see all tags of the current repo via the dstack tags command. You can use a tag name instead of the run name with the dstack artifacts command. Just put a colon before the tag name: dstack artifacts list :mnist_data","title":"Add tag"},{"location":"dev/#run-train-workflow","text":"Now that the mnist_data tag is added, we can run the train workflow. dstack run train On the start of the train workflow, dstack will download the artifacts of the tag mnist_data to the working directory. RUN WORKFLOW STATUS APPS ARTIFACTS SUBMITTED TAG wet-mangust-2 train Submitted lightning_logs now Povisioning... It may take up to a minute. \u2713 To interrupt, press Ctrl+C. Epoch 4 : 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 1876 /1876 [ 00 :17< 00 :00, 107 .85it/s, loss = 0 .0944, v_num = 0 , val_loss = 0 .108, val_acc = 0 .968 ] ` Trainer.fit ` stopped: ` max_epochs = 5 ` reached. Testing DataLoader 0 : 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 313 /313 [ 00 :00< 00 :00, 589 .34it/s ] Test metric DataLoader 0 val_acc 0 .965399980545044 val_loss 0 .10975822806358337","title":"Run train workflow"},{"location":"dev/#download-artifacts","text":"Once the train workflow is finished, if you want, you can download its artifacts using the dstack artifacts download command. dstack artifacts download wet-mangust-2 . It will download the lightning_logs folder to the current directory.","title":"Download artifacts"},{"location":"faq/","text":"FAQs Question 1 A. This is the answer This is another part to the answer Question 2 A. This is the answer This is another part to the answer Question 3 A. This is the answer This is another part to the answer Question 4 A. This is the answer This is another part to the answer","title":"FAQs"},{"location":"faq/#faqs","text":"","title":"FAQs"},{"location":"license/","text":"License This is an example license page.","title":"License"},{"location":"license/#license","text":"This is an example license page.","title":"License"},{"location":"examples/dashboards/","text":"Dashboards The topics and docker dashboards allow for detailled views on either property. Here is some example code. .csi/workflows.yaml hello_csi.py workflows : - name : hello-fastapi provider : bash ports : 1 commands : - pip install fastapi uvicorn - uvicorn hello_fastapi:app --port $PORT_0 --host 0.0.0.0 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } NOTE: Here is something important to note. Just like in the previous example, this is a note.","title":"Example Dashboards"},{"location":"examples/dashboards/#dashboards","text":"The topics and docker dashboards allow for detailled views on either property. Here is some example code. .csi/workflows.yaml hello_csi.py workflows : - name : hello-fastapi provider : bash ports : 1 commands : - pip install fastapi uvicorn - uvicorn hello_fastapi:app --port $PORT_0 --host 0.0.0.0 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } NOTE: Here is something important to note. Just like in the previous example, this is a note.","title":"Dashboards"},{"location":"examples/topics/","text":"Topics Here we explain the topics","title":"How to analyze research trends?"},{"location":"examples/topics/#topics","text":"Here we explain the topics","title":"Topics"},{"location":"examples/venues/","text":"Venues Here we explain the venues.","title":"How to analyze conferences?"},{"location":"examples/venues/#venues","text":"Here we explain the venues.","title":"Venues"},{"location":"tutorials/first-steps/","text":"First steps","title":"Tutorial: First steps"},{"location":"tutorials/first-steps/#first-steps","text":"","title":"First steps"}]}